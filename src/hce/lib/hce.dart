// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum HceState {
  unsupported,
  unavailable,
  stopped,
  running,
}

enum ServiceDeactivationReason {
  linkLost,
  serviceDeselected,
}

class HceStateWrapper {
  HceStateWrapper({
    required this.state,
  });

  HceState state;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['state'] = state.index;
    return pigeonMap;
  }

  static HceStateWrapper decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HceStateWrapper(
      state: HceState.values[pigeonMap['state']! as int]
,
    );
  }
}

class ServiceDeactivationReasonWrapper {
  ServiceDeactivationReasonWrapper({
    required this.reason,
  });

  ServiceDeactivationReason reason;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['reason'] = reason.index;
    return pigeonMap;
  }

  static ServiceDeactivationReasonWrapper decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ServiceDeactivationReasonWrapper(
      reason: ServiceDeactivationReason.values[pigeonMap['reason']! as int]
,
    );
  }
}

class _HceServiceCodec extends StandardMessageCodec {
  const _HceServiceCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HceStateWrapper) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return HceStateWrapper.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class HceService {
  /// Constructor for [HceService].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HceService({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HceServiceCodec();

  Future<HceStateWrapper> getState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'pt.up.fe.es2122.l2eic09t3.hce.pigeon.HceService.getState', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as HceStateWrapper?)!;
    }
  }

  Future<void> start() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'pt.up.fe.es2122.l2eic09t3.hce.pigeon.HceService.start', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> stop() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'pt.up.fe.es2122.l2eic09t3.hce.pigeon.HceService.stop', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _ApduServiceCodec extends StandardMessageCodec {
  const _ApduServiceCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ServiceDeactivationReasonWrapper) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return ServiceDeactivationReasonWrapper.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class ApduService {
  static const MessageCodec<Object?> codec = _ApduServiceCodec();

  Future<Uint8List?> processApdu(Uint8List command);
  Future<void> processDeactivation(ServiceDeactivationReasonWrapper reason);
  static void setup(ApduService? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'pt.up.fe.es2122.l2eic09t3.hce.pigeon.ApduService.processApdu', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for pt.up.fe.es2122.l2eic09t3.hce.pigeon.ApduService.processApdu was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_command = (args[0] as Uint8List?);
          assert(arg_command != null, 'Argument for pt.up.fe.es2122.l2eic09t3.hce.pigeon.ApduService.processApdu was null, expected non-null Uint8List.');
          final Uint8List? output = await api.processApdu(arg_command!);
          return output;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'pt.up.fe.es2122.l2eic09t3.hce.pigeon.ApduService.processDeactivation', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for pt.up.fe.es2122.l2eic09t3.hce.pigeon.ApduService.processDeactivation was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ServiceDeactivationReasonWrapper? arg_reason = (args[0] as ServiceDeactivationReasonWrapper?);
          assert(arg_reason != null, 'Argument for pt.up.fe.es2122.l2eic09t3.hce.pigeon.ApduService.processDeactivation was null, expected non-null ServiceDeactivationReasonWrapper.');
          await api.processDeactivation(arg_reason!);
          return;
        });
      }
    }
  }
}
