// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import <Foundation/Foundation.h>
@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, HceState) {
  HceStateUnsupported = 0,
  HceStateUnavailable = 1,
  HceStateStopped = 2,
  HceStateRunning = 3,
};

typedef NS_ENUM(NSUInteger, ServiceDeactivationReason) {
  ServiceDeactivationReasonLinkLost = 0,
  ServiceDeactivationReasonServiceDeselected = 1,
};

@class HceStateWrapper;
@class ServiceDeactivationReasonWrapper;

@interface HceStateWrapper : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithState:(HceState)state;
@property(nonatomic, assign) HceState state;
@end

@interface ServiceDeactivationReasonWrapper : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithReason:(ServiceDeactivationReason)reason;
@property(nonatomic, assign) ServiceDeactivationReason reason;
@end

/// The codec used by HceService.
NSObject<FlutterMessageCodec> *HceServiceGetCodec(void);

@protocol HceService
/// @return `nil` only when `error != nil`.
- (nullable HceStateWrapper *)getStateWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)startWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)stopWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void HceServiceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HceService> *_Nullable api);

/// The codec used by ApduService.
NSObject<FlutterMessageCodec> *ApduServiceGetCodec(void);

@interface ApduService : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)processApduCommand:(FlutterStandardTypedData *)command completion:(void(^)(FlutterStandardTypedData *_Nullable, NSError *_Nullable))completion;
- (void)processDeactivationReason:(ServiceDeactivationReasonWrapper *)reason completion:(void(^)(NSError *_Nullable))completion;
@end
NS_ASSUME_NONNULL_END
