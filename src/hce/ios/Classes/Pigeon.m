// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface HceStateWrapper ()
+ (HceStateWrapper *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ServiceDeactivationReasonWrapper ()
+ (ServiceDeactivationReasonWrapper *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation HceStateWrapper
+ (instancetype)makeWithState:(HceState)state {
  HceStateWrapper* pigeonResult = [[HceStateWrapper alloc] init];
  pigeonResult.state = state;
  return pigeonResult;
}
+ (HceStateWrapper *)fromMap:(NSDictionary *)dict {
  HceStateWrapper *pigeonResult = [[HceStateWrapper alloc] init];
  pigeonResult.state = [GetNullableObject(dict, @"state") integerValue];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"state" : @(self.state),
  };
}
@end

@implementation ServiceDeactivationReasonWrapper
+ (instancetype)makeWithReason:(ServiceDeactivationReason)reason {
  ServiceDeactivationReasonWrapper* pigeonResult = [[ServiceDeactivationReasonWrapper alloc] init];
  pigeonResult.reason = reason;
  return pigeonResult;
}
+ (ServiceDeactivationReasonWrapper *)fromMap:(NSDictionary *)dict {
  ServiceDeactivationReasonWrapper *pigeonResult = [[ServiceDeactivationReasonWrapper alloc] init];
  pigeonResult.reason = [GetNullableObject(dict, @"reason") integerValue];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"reason" : @(self.reason),
  };
}
@end

@interface HceServiceCodecReader : FlutterStandardReader
@end
@implementation HceServiceCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [HceStateWrapper fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface HceServiceCodecWriter : FlutterStandardWriter
@end
@implementation HceServiceCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[HceStateWrapper class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface HceServiceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HceServiceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HceServiceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HceServiceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HceServiceGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    HceServiceCodecReaderWriter *readerWriter = [[HceServiceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void HceServiceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HceService> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HceService.getState"
        binaryMessenger:binaryMessenger
        codec:HceServiceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getStateWithError:)], @"HceService api (%@) doesn't respond to @selector(getStateWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        HceStateWrapper *output = [api getStateWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HceService.start"
        binaryMessenger:binaryMessenger
        codec:HceServiceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startWithError:)], @"HceService api (%@) doesn't respond to @selector(startWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api startWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HceService.stop"
        binaryMessenger:binaryMessenger
        codec:HceServiceGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopWithError:)], @"HceService api (%@) doesn't respond to @selector(stopWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ApduServiceCodecReader : FlutterStandardReader
@end
@implementation ApduServiceCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [ServiceDeactivationReasonWrapper fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ApduServiceCodecWriter : FlutterStandardWriter
@end
@implementation ApduServiceCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[ServiceDeactivationReasonWrapper class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface ApduServiceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ApduServiceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ApduServiceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ApduServiceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ApduServiceGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    ApduServiceCodecReaderWriter *readerWriter = [[ApduServiceCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface ApduService ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation ApduService

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)processApduCommand:(FlutterStandardTypedData *)arg_command completion:(void(^)(FlutterStandardTypedData *_Nullable, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.ApduService.processApdu"
      binaryMessenger:self.binaryMessenger
      codec:ApduServiceGetCodec()];
  [channel sendMessage:@[arg_command ?: [NSNull null]] reply:^(id reply) {
    FlutterStandardTypedData *output = reply;
    completion(output, nil);
  }];
}
- (void)processDeactivationReason:(ServiceDeactivationReasonWrapper *)arg_reason completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.ApduService.processDeactivation"
      binaryMessenger:self.binaryMessenger
      codec:ApduServiceGetCodec()];
  [channel sendMessage:@[arg_reason ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
